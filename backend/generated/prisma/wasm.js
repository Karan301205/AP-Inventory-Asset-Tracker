
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  cust_id: 'cust_id',
  cust_name: 'cust_name',
  email: 'email',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.ItemScalarFieldEnum = {
  item_id: 'item_id',
  category: 'category',
  item_name: 'item_name',
  stock: 'stock',
  price: 'price'
};

exports.Prisma.TransactionScalarFieldEnum = {
  Bill_No: 'Bill_No',
  Bill_Date: 'Bill_Date',
  Name: 'Name',
  Item_Name: 'Item_Name',
  Qty: 'Qty',
  item_price: 'item_price',
  Total_Price: 'Total_Price'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  cust_name: 'cust_name',
  email: 'email',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.itemOrderByRelevanceFieldEnum = {
  category: 'category',
  item_name: 'item_name'
};

exports.Prisma.TransactionOrderByRelevanceFieldEnum = {
  Name: 'Name',
  Item_Name: 'Item_Name'
};


exports.Prisma.ModelName = {
  Customer: 'Customer',
  item: 'item',
  Transaction: 'Transaction'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/parthsingh/Desktop/Inventory-Asset-Tracker/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/parthsingh/Desktop/Inventory-Asset-Tracker/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Customer {\n  cust_id   Int     @id @default(autoincrement())\n  cust_name String? @unique\n\n  email   String  @unique\n  phone   String?\n  address String?\n\n  transactions Transaction[] @relation(\"CustomerTransactions\")\n}\n\nmodel item {\n  item_id   Int     @id @default(autoincrement())\n  category  String?\n  item_name String? @unique\n\n  stock Int?\n  price Decimal @default(0.00)\n\n  transactions Transaction[] @relation(\"ItemTransactions\")\n}\n\nmodel Transaction {\n  Bill_No   Int       @id @default(autoincrement())\n  Bill_Date DateTime?\n\n  Name      String?\n  Item_Name String?\n\n  Qty         Int?\n  item_price  Decimal @default(0.00)\n  Total_Price Decimal @default(0.00)\n\n  customer Customer? @relation(\"CustomerTransactions\", fields: [Name], references: [cust_name], map: \"Transaction_customer_fkey\")\n\n  item item? @relation(\"ItemTransactions\", fields: [Item_Name], references: [item_name], map: \"Transaction_item_fkey\")\n}\n",
  "inlineSchemaHash": "35f9e41d5c54990630377751ef32e2c3793992fe5067632ddfda2f7520acf01e",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Customer\":{\"fields\":[{\"name\":\"cust_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"cust_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"CustomerTransactions\"}],\"dbName\":null},\"item\":{\"fields\":[{\"name\":\"item_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"item_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stock\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"ItemTransactions\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"Bill_No\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Bill_Date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Item_Name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Qty\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"item_price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"Total_Price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"CustomerTransactions\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"item\",\"relationName\":\"ItemTransactions\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

